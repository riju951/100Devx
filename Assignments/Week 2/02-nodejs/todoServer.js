/*
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if you exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// Import the NodeJS module called Express to create a HTTP server.
const express = require("express");
// Import the NodeJS middleware to parse/extract the body of incoming requests.
const bodyParser = require("body-parser");
// Create an instance of express server.
const app = express();
// Use the bodyParser middleware that will only parse the JSON body of the request.
app.use(bodyParser.json());

let todos = [];

// GET request that retrieves all todo items.
app.get("/todos", function (req, res) {
  res.json(todos);
});

// GET request that retrieves a specific todo item by ID.
app.get("/todos/:id", function (req, res) {
  // Search the todo in the array by find() function with given id.
  const todo = todos.find((reqTodo) => reqTodo.id === parseInt(req.params.id));
  // If todo doesent' exists, return 404 error.
  if (!todo) {
    // Give response with 404 status code stating the error.
    res.status(404).json({
      message: "Todo doesen't exists!",
    });
  }
  // If todo exists, return it as response.
  res.json(todo);
});

// POST request that creates a new todo item.
app.post("/todos", function (req, res) {
  // Create a new todo object with unique random id.
  const newTodo = {
    id: Math.floor(Math.random() * 1000000),
    title: req.body.title,
    description: req.body.description,
  };
  // Add the new todo to the todos array.
  todos.push(newTodo);
  // If successful, send response with status code 201 aling with the new todo created.
  res.status(201).json(newTodo);
});

// PUT request thats update an existing todo item by ID.
app.put("/todos/:id", (req, res) => {
  // Find the index of the todo in the array by findIndex() function with given id.
  const todoIndex = todos.findIndex(
    (reqTodo) => reqTodo.id === parseInt(req.params.id)
  );
  // If todo doesen't exists.
  if (todoIndex === -1) {
    // Give response with 404 status code stating the error.
    res.status(404).json({
      message: "Todo doesen't exists!",
    });
  } else {
    // If the todo exists, update its title/description and send as response to update.
    todos[todoIndex].title = req.body.title;
    todos[todoIndex].description = req.body.description;
    res.json(todos[todoIndex]);
  }
});

// DELETE request that deletes a todo item by ID.
app.delete("/todos/:id", (req, res) => {
  // Find the index of the todo in the array by findIndex() function with given id.
  const todoIndex = todos.findIndex(
    (reqTodo) => reqTodo.id === parseInt(req.params.id)
  );
  // If todo doesen't exists.
  if (todoIndex === -1) {
    // Give response with 404 status code stating the error.
    res.status(404).json({
      message: "Todo doesen't exists!",
    });
  } else {
    // If the todo exists, remove it from the array using splice() function and send as response to update.
    todos.splice(todoIndex, 1);
    res.status(200).send();
  }
});

// For other routes apart from above four, return 404.
app.use((req, res, next) => {
  res.status(404).send("Route not found!");
});

module.exports = app;
